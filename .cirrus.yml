env:
  AWS_ACCESS_KEY_ID: ENCRYPTED[19600ef6da68a544b43be5b8a03da226b09d6aabeda0c204d380d548876cdd8638e3537290ce04f7922f67eb04d105f5]
  AWS_SECRET_ACCESS_KEY: ENCRYPTED[56029ff5b0d2b0ca50831d1f070a4cd9cc687030ca6c226ff4ed72836f2de59cf937ca96b4bedd9b4dbcac54fddcdc8e]
  CC: ENCRYPTED[b73f2f7be9a54bc508f796fda3afda84015d6afa42004cc278b65bb51bba1d9a80679567d58b01847a8421e34f64e1d1]

allow_failures: $DART_CHANNEL == 'dev' || $CODE_VERSION == 'insiders'

task:
  env:
    DART_PATH: "/tmp/with spaces/dart"
    FLUTTER_PATH: "/tmp/with spaces/flutter"
    PATH: "$FLUTTER_PATH/bin:$DART_PATH/bin:$PATH"
    DEBIAN_FRONTEND: noninteractive
    ELECTRON_NO_ATTACH_CONSOLE: 1
    CXX: "g++-4.8"
    CC: "gcc-4.8"
    DISPLAY: ":99.0"

  matrix:
    - name: Linux
      container:
        image: ubuntu:bionic
      env:
        DART_OS: linux
        matrix:
          DART_CHANNEL: stable
          DART_CHANNEL: dev
        matrix:
          CODE_VERSION: stable
          CODE_VERSION: insiders
    - name: Mac
      osx_instance:
        image: high-sierra-base
      env:
        DART_OS: macos
        matrix:
          DART_CHANNEL: stable
          DART_CHANNEL: dev
        matrix:
          CODE_VERSION: stable
          CODE_VERSION: insiders

  # only_if: $CIRRUS_TAG == "" && ($CIRRUS_BRANCH == "master" || [ $DART_CHANNEL == $CODE_VERSION ])
  only_if: $CIRRUS_BRANCH == "master" || $DART_CHANNEL == $CODE_VERSION

  install_dependencies_script: |
    echo Misc setup
    export ELECTRON_NO_ATTACH_CONSOLE=1
    gem install dpl
    echo Setting variables...
    mkdir -p with\ spaces
    cd with\ spaces
    echo Downloading Dart and Flutter...
    curl https://storage.googleapis.com/dart-archive/channels/$DART_CHANNEL/latest/sdk/dartsdk-$DART_OS-x64-release.zip > dart-sdk.zip
    unzip dart-sdk.zip > /dev/null
    mkdir -p flutter
    cd flutter
    if [[ ! -d .git ]]; then
      git init;
      git remote add origin https://github.com/flutter/flutter.git;
    else
      git remote set-url origin https://github.com/flutter/flutter.git;
    fi
    git fetch
    git reset --hard origin/$FLUTTER_BRANCH
    git checkout $FLUTTER_BRANCH --
    cd ..
    echo Configuring Dart and Flutter...
    flutter/bin/flutter config --no-analytics
    flutter/bin/flutter update-packages
    if [[ $DART_CHANNEL != "stable" ]]; then
      flutter/bin/flutter config --enable-web;
    fi
    export FLUTTER_PATH=`pwd`/flutter
    export DART_PATH=`pwd`/dart-sdk
    To ensure we follow symlinks properly, put links
    in folders that we'll use in PATHs.
    mkdir dartsymlinkbins
    ln -s ../dart-sdk/bin/dart dartsymlinkbins/dart
    mkdir fluttersymlinkbins
    ln -s ../flutter/bin/flutter fluttersymlinkbins/flutter
    To ensure we detectonly detect real SDKs and not non-Dartlang
    dart binaries, add a fake dart that is actually just echo
    mkdir fakedart
    ln -s /bin/echo fakedart/dart
    export DART_PATH_SYMLINK=`pwd`/fakedart:`pwd`/dartsymlinkbins
    export FLUTTER_PATH_SYMLINK=`pwd`/fluttersymlinkbins
    dart-sdk/bin/dart --version
    flutter/bin/flutter --version
    dartsymlinkbins/dart --version
    fluttersymlinkbins/flutter --version
    node --version
    npm --version
    flutter/bin/flutter doctor
    dart-sdk/bin/pub global activate --no-executables stagehand
    dart-sdk/bin/pub global activate --no-executables args 1.5.0
    dart-sdk/bin/pub global activate --no-executables meta 1.1.6
    dart-sdk/bin/pub global activate --no-executables pedantic 1.4.0
    dart-sdk/bin/pub global activate --no-executables json_annotation 1.2.0
    dart-sdk/bin/pub global activate --no-executables devtools
    dart-sdk/bin/pub global activate --no-executables webdev
    These shouldn't be activated, but might be in the pub cache that CI restored
    dart-sdk/bin/pub global deactivate path || true
    dart-sdk/bin/pub global deactivate usage || true
    cd ..
    mkdir -p .test_results
    mkdir -p .dart_code_test_logs

  setup_script: |
    npm ci
    if [ $OS == "linux" ]; then
      curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter;
    else
      curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-darwin-amd64 > ./cc-test-reporter;
    fi
    chmod +x ./cc-test-reporter;
    ./cc-test-reporter before-build;

  build_script: |
    npm run lint
    npm test
    killall flutter_tester || true
    ps -ax | grep -v grep | grep dart || true
    if [[ $(pgrep -x dart) ]]; then
      echo 'DART WAS FOUND';
      exit 1;
    fi;
    cp -v $TMPDIR/exthost-*.cpuprofile .dart_code_test_logs || true
    cp -v /tmp/exthost-*.cpuprofile .dart_code_test_logs || true

  upload_logs_script: |
    if [ -z "$CIRRUS_PR" ]; then
      dpl --provider=s3 --bucket="test-results.dartcode.org" --skip_cleanup=true --local-dir=".test_results" --upload-dir="$CIRRUS_BRANCH/$CIRRUS_CHANGE_IN_REPO/$OS" --acl=public_read --default_text_charset=utf-8;
      dpl --provider=s3 --bucket="test-results.dartcode.org" --skip_cleanup=true --local-dir=".dart_code_test_logs" --upload-dir="logs/$CIRRUS_BRANCH/$CIRRUS_CHANGE_IN_REPO/$OS" --acl=public_read --default_text_charset=utf-8;
    fi
    if [ $DART_CHANNEL == "stable" ] && [ $CODE_CHANNEL == "stable" ]; then
      ./cc-test-reporter after-build;
    fi
